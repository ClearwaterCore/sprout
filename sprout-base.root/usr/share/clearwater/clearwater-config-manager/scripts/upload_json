#!/bin/bash

# Copyright (C) Metaswitch Networks
# If license terms are provided to you in a COPYING file in the root directory
# of the source code repository by which you are accessing this code, then
# the license outlined in that COPYING file applies to your use.
# Otherwise no rights are granted except for those provided to you by
# Metaswitch Networks in a separate written agreement.

CONFPATH=/etc/clearwater
FILENAME=$1
KEY=$2
ALLOW_LARGE_UPLOADS=$3

function usage() {
  echo "Usage: upload_json <filename> <key>"
}

if [[ $1 == "" || $2 == "" ]]
then
  usage
  exit 2
fi

# Check we can contact `etcd`
local_site_name=site1
. /etc/clearwater/config
nc -z ${management_local_ip:-$local_ip} 4000
if [[ $? != 0 ]]
then
  echo "The Clearwater Configuration store (etcd) is not running"
  echo "Please start it before uploading configuration"
  exit 2
fi

# Check that the file is already present. The config file should either be put
# in place by the user, or created by the plugin at startup if it finds both
# the file and etcd key missing. If it does not exist, the disk may have been
# full, or some other error may have occured.
if [[ ! -f $CONFPATH/$FILENAME ]]
then
  echo "No configuration file found at $CONFPATH/$FILENAME"
  exit 2
fi

# Reject file that is too large for etcd. But allow larger file if the script is
# called with --allow-large, so that the wrapper script is backward compatible.
# All scripts calling this function will pass the optional argument directly to
# this function to check if it's --allow-large
uploadsize=10000
filesize=$(wc -c <"$CONFPATH/$FILENAME")
if [[ $filesize -ge $uploadsize && $ALLOW_LARGE_UPLOADS != "--allow-large" ]]
then
  echo "The configuration file at $CONFPATH/$FILENAME is larger than the recommended size of $uploadsize bytes"
  echo "Please re-run the command with the --allow-large flag if you want to force upload the file"
  exit 2
fi

# Ensure that the file is either empty, or valid JSON
if [[ ! -s $CONFPATH/$FILENAME ]]
then
  echo "The configuration file at $CONFPATH/$FILENAME is empty, uploading a blank file"
else
  jsoncheck=$(python -m json.tool < $CONFPATH/$FILENAME 2>&1)
  rc=$?
  if [ $rc != 0 ]; then
    echo "The configuration file at $CONFPATH/$FILENAME contains invalid JSON. The JSON parser reported the following error:"
    echo - \"$jsoncheck\"
    echo "Correct $CONFPATH/$FILENAME to use the documented syntax for this configuration file type, and re-run the command"
    exit 2
  fi
fi

# Upload the file to etcd
keypath=http://${management_local_ip:-$local_ip}:4000/v2/keys/clearwater/$local_site_name/configuration/$KEY
curl -X PUT $keypath --data-urlencode value@$CONFPATH/$FILENAME 2> /tmp/upload-json-file.stderr.$$ | tee /tmp/upload-json-file.stdout.$$ | egrep -q "\"action\":\"set\""
rc=$?

# Check the return code and log if appropriate.
if [ $rc != 0 ] ; then
  echo Failed to upload the configuration file to $keypath  >&2
  cat /tmp/upload-json-file.stderr.$$                       >&2
  cat /tmp/upload-json-file.stdout.$$                       >&2
fi
rm -f /tmp/upload-json-file.stderr.$$ /tmp/upload-json-file.stdout.$$

exit $rc
